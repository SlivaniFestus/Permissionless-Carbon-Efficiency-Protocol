;; carbon-credit-token.clar

(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)

(define-constant ERR-NOT-AUTHORIZED u100)
(define-constant ERR-INSUFFICIENT-BALANCE u101)
(define-constant ERR-INVALID-AMOUNT u102)
(define-constant ERR-INVALID-RECIPIENT u103)
(define-constant ERR-PAUSED u104)
(define-constant ERR-MINT-CAP-EXCEEDED u105)
(define-constant ERR-INVALID-MEMO u106)
(define-constant ERR-BLACKLISTED u107)
(define-constant ERR-INVALID-DECIMALS u108)
(define-constant ERR-INVALID-SYMBOL u109)
(define-constant ERR-INVALID-NAME u110)
(define-constant ERR-INVALID-URI u111)
(define-constant ERR-ALREADY-INITIALIZED u112)
(define-constant ERR-NOT-INITIALIZED u113)
(define-constant ERR-INVALID-MINTER u114)
(define-constant ERR-MAX-MINTERS-EXCEEDED u115)
(define-constant ERR-INVALID-BURNER u116)
(define-constant ERR-INVALID-PAUSER u117)
(define-constant ERR-INVALID-BLACKLISTER u118)
(define-constant ERR-INVALID-UPDATE-PARAM u119)
(define-constant ERR-INVALID-STATUS u120)

(define-fungible-token carbon-credit u100000000)

(define-data-var token-name (string-ascii 32) "CarbonCredit")
(define-data-var token-symbol (string-ascii 10) "CCT")
(define-data-var token-decimals uint u6)
(define-data-var token-uri (optional (string-utf8 256)) none)
(define-data-var total-supply uint u0)
(define-data-var mint-cap uint u100000000)
(define-data-var contract-owner principal tx-sender)
(define-data-var is-paused bool false)
(define-data-var max-minters uint u10)
(define-data-var initialized bool false)

(define-map balances principal uint)
(define-map minters principal bool)
(define-map burners principal bool)
(define-map pausers principal bool)
(define-map blacklisters principal bool)
(define-map blacklisted principal bool)

(define-read-only (get-name)
  (ok (var-get token-name))
)

(define-read-only (get-symbol)
  (ok (var-get token-symbol))
)

(define-read-only (get-decimals)
  (ok (var-get token-decimals))
)

(define-read-only (get-balance (account principal))
  (ok (default-to u0 (map-get? balances account)))
)

(define-read-only (get-total-supply)
  (ok (var-get total-supply))
)

(define-read-only (get-token-uri)
  (ok (var-get token-uri))
)

(define-read-only (get-contract-owner)
  (ok (var-get contract-owner))
)

(define-read-only (is-contract-paused)
  (ok (var-get is-paused))
)

(define-read-only (is-minter (account principal))
  (ok (default-to false (map-get? minters account)))
)

(define-read-only (is-burner (account principal))
  (ok (default-to false (map-get? burners account)))
)

(define-read-only (is-pauser (account principal))
  (ok (default-to false (map-get? pausers account)))
)

(define-read-only (is-blacklister (account principal))
  (ok (default-to false (map-get? blacklisters account)))
)

(define-read-only (is-blacklisted-account (account principal))
  (ok (default-to false (map-get? blacklisted account)))
)

(define-private (validate-amount (amount uint))
  (if (> amount u0)
    (ok true)
    (err ERR-INVALID-AMOUNT))
)

(define-private (validate-recipient (recipient principal))
  (if (not (is-eq recipient tx-sender))
    (ok true)
    (err ERR-INVALID-RECIPIENT))
)

(define-private (validate-memo (memo (optional (buff 34))))
  (match memo m
    (if (<= (len m) u34)
      (ok true)
      (err ERR-INVALID-MEMO))
    (ok true))
)

(define-private (validate-name (name (string-ascii 32)))
  (if (and (> (len name) u0) (<= (len name) u32))
    (ok true)
    (err ERR-INVALID-NAME))
)

(define-private (validate-symbol (symbol (string-ascii 10)))
  (if (and (> (len symbol) u0) (<= (len symbol) u10))
    (ok true)
    (err ERR-INVALID-SYMBOL))
)

(define-private (validate-decimals (decimals uint))
  (if (<= decimals u18)
    (ok true)
    (err ERR-INVALID-DECIMALS))
)

(define-private (validate-uri (uri (optional (string-utf8 256))))
  (match uri u
    (if (<= (len u) u256)
      (ok true)
      (err ERR-INVALID-URI))
    (ok true))
)

(define-private (validate-principal (p principal))
  (ok true)
)

(define-private (check-not-paused)
  (if (not (var-get is-paused))
    (ok true)
    (err ERR-PAUSED))
)

(define-private (check-not-blacklisted (account principal))
  (if (not (default-to false (map-get? blacklisted account)))
    (ok true)
    (err ERR-BLACKLISTED))
)

(define-private (check-is-owner (account principal))
  (if (is-eq (var-get contract-owner) account)
    (ok true)
    (err ERR-NOT-AUTHORIZED))
)

(define-private (check-is-minter (account principal))
  (if (default-to false (map-get? minters account))
    (ok true)
    (err ERR-INVALID-MINTER))
)

(define-private (check-is-burner (account principal))
  (if (default-to false (map-get? burners account))
    (ok true)
    (err ERR-INVALID-BURNER))
)

(define-private (check-is-pauser (account principal))
  (if (default-to false (map-get? pausers account))
    (ok true)
    (err ERR-INVALID-PAUSER))
)

(define-private (check-is-blacklister (account principal))
  (if (default-to false (map-get? blacklisters account))
    (ok true)
    (err ERR-INVALID-BLACKLISTER))
)

(define-private (check-initialized)
  (if (var-get initialized)
    (ok true)
    (err ERR-NOT-INITIALIZED))
)

(define-private (check-not-initialized)
  (if (not (var-get initialized))
    (ok true)
    (err ERR-ALREADY-INITIALIZED))
)

(define-public (initialize
  (name (string-ascii 32))
  (symbol (string-ascii 10))
  (decimals uint)
  (uri (optional (string-utf8 256)))
  (initial-supply uint)
  (cap uint))
  (begin
    (try! (check-not-initialized))
    (try! (check-is-owner tx-sender))
    (try! (validate-name name))
    (try! (validate-symbol symbol))
    (try! (validate-decimals decimals))
    (try! (validate-uri uri))
    (try! (validate-amount initial-supply))
    (try! (validate-amount cap))
    (var-set token-name name)
    (var-set token-symbol symbol)
    (var-set token-decimals decimals)
    (var-set token-uri uri)
    (var-set mint-cap cap)
    (try! (ft-mint? carbon-credit initial-supply tx-sender))
    (map-set balances tx-sender initial-supply)
    (var-set total-supply initial-supply)
    (var-set initialized true)
    (print {event: "initialized", name: name, symbol: symbol})
    (ok true)
  )
)

(define-public (transfer (amount uint) (sender principal) (recipient principal) (memo (optional (buff 34))))
  (begin
    (try! (check-initialized))
    (try! (check-not-paused))
    (try! (check-not-blacklisted sender))
    (try! (check-not-blacklisted recipient))
    (asserts! (is-eq tx-sender sender) (err ERR-NOT-AUTHORIZED))
    (try! (validate-amount amount))
    (try! (validate-recipient recipient))
    (try! (validate-memo memo))
    (asserts! (>= (default-to u0 (map-get? balances sender)) amount) (err ERR-INSUFFICIENT-BALANCE))
    (try! (ft-transfer? carbon-credit amount sender recipient))
    (map-set balances sender (- (default-to u0 (map-get? balances sender)) amount))
    (map-set balances recipient (+ (default-to u0 (map-get? balances recipient)) amount))
    (print {event: "transfer", amount: amount, sender: sender, recipient: recipient, memo: memo})
    (ok true)
  )
)

(define-public (mint (amount uint) (recipient principal))
  (begin
    (try! (check-initialized))
    (try! (check-not-paused))
    (try! (check-is-minter tx-sender))
    (try! (validate-amount amount))
    (try! (validate-recipient recipient))
    (try! (check-not-blacklisted recipient))
    (asserts! (<= (+ (var-get total-supply) amount) (var-get mint-cap)) (err ERR-MINT-CAP-EXCEEDED))
    (try! (ft-mint? carbon-credit amount recipient))
    (map-set balances recipient (+ (default-to u0 (map-get? balances recipient)) amount))
    (var-set total-supply (+ (var-get total-supply) amount))
    (print {event: "mint", amount: amount, recipient: recipient})
    (ok true)
  )
)

(define-public (burn (amount uint) (sender principal))
  (begin
    (try! (check-initialized))
    (try! (check-not-paused))
    (try! (check-is-burner tx-sender))
    (try! (validate-amount amount))
    (asserts! (is-eq tx-sender sender) (err ERR-NOT-AUTHORIZED))
    (asserts! (>= (default-to u0 (map-get? balances sender)) amount) (err ERR-INSUFFICIENT-BALANCE))
    (try! (ft-burn? carbon-credit amount sender))
    (map-set balances sender (- (default-to u0 (map-get? balances sender)) amount))
    (var-set total-supply (- (var-get total-supply) amount))
    (print {event: "burn", amount: amount, sender: sender})
    (ok true)
  )
)

(define-public (pause-contract)
  (begin
    (try! (check-initialized))
    (try! (check-is-pauser tx-sender))
    (var-set is-paused true)
    (print {event: "paused"})
    (ok true)
  )
)

(define-public (unpause-contract)
  (begin
    (try! (check-initialized))
    (try! (check-is-pauser tx-sender))
    (var-set is-paused false)
    (print {event: "unpaused"})
    (ok true)
  )
)

(define-public (add-minter (new-minter principal))
  (begin
    (try! (check-initialized))
    (try! (check-is-owner tx-sender))
    (try! (validate-principal new-minter))
    (asserts! (< (len (map-keys minters)) (var-get max-minters)) (err ERR-MAX-MINTERS-EXCEEDED))
    (map-set minters new-minter true)
    (print {event: "minter-added", minter: new-minter})
    (ok true)
  )
)

(define-public (remove-minter (minter principal))
  (begin
    (try! (check-initialized))
    (try! (check-is-owner tx-sender))
    (try! (validate-principal minter))
    (map-delete minters minter)
    (print {event: "minter-removed", minter: minter})
    (ok true)
  )
)

(define-public (add-burner (new-burner principal))
  (begin
    (try! (check-initialized))
    (try! (check-is-owner tx-sender))
    (try! (validate-principal new-burner))
    (map-set burners new-burner true)
    (print {event: "burner-added", burner: new-burner})
    (ok true)
  )
)

(define-public (remove-burner (burner principal))
  (begin
    (try! (check-initialized))
    (try! (check-is-owner tx-sender))
    (try! (validate-principal burner))
    (map-delete burners burner)
    (print {event: "burner-removed", burner: burner})
    (ok true)
  )
)

(define-public (add-pauser (new-pauser principal))
  (begin
    (try! (check-initialized))
    (try! (check-is-owner tx-sender))
    (try! (validate-principal new-pauser))
    (map-set pausers new-pauser true)
    (print {event: "pauser-added", pauser: new-pauser})
    (ok true)
  )
)

(define-public (remove-pauser (pauser principal))
  (begin
    (try! (check-initialized))
    (try! (check-is-owner tx-sender))
    (try! (validate-principal pauser))
    (map-delete pausers pauser)
    (print {event: "pauser-removed", pauser: pauser})
    (ok true)
  )
)

(define-public (add-blacklister (new-blacklister principal))
  (begin
    (try! (check-initialized))
    (try! (check-is-owner tx-sender))
    (try! (validate-principal new-blacklister))
    (map-set blacklisters new-blacklister true)
    (print {event: "blacklister-added", blacklister: new-blacklister})
    (ok true)
  )
)

(define-public (remove-blacklister (blacklister principal))
  (begin
    (try! (check-initialized))
    (try! (check-is-owner tx-sender))
    (try! (validate-principal blacklister))
    (map-delete blacklisters blacklister)
    (print {event: "blacklister-removed", blacklister: blacklister})
    (ok true)
  )
)

(define-public (blacklist-account (account principal))
  (begin
    (try! (check-initialized))
    (try! (check-is-blacklister tx-sender))
    (try! (validate-principal account))
    (map-set blacklisted account true)
    (print {event: "account-blacklisted", account: account})
    (ok true)
  )
)

(define-public (unblacklist-account (account principal))
  (begin
    (try! (check-initialized))
    (try! (check-is-blacklister tx-sender))
    (try! (validate-principal account))
    (map-delete blacklisted account)
    (print {event: "account-unblacklisted", account: account})
    (ok true)
  )
)

(define-public (update-mint-cap (new-cap uint))
  (begin
    (try! (check-initialized))
    (try! (check-is-owner tx-sender))
    (try! (validate-amount new-cap))
    (asserts! (> new-cap (var-get total-supply)) (err ERR-INVALID-AMOUNT))
    (var-set mint-cap new-cap)
    (print {event: "mint-cap-updated", cap: new-cap})
    (ok true)
  )
)

(define-public (update-token-uri (new-uri (optional (string-utf8 256))))
  (begin
    (try! (check-initialized))
    (try! (check-is-owner tx-sender))
    (try! (validate-uri new-uri))
    (var-set token-uri new-uri)
    (print {event: "token-uri-updated", uri: new-uri})
    (ok true)
  )
)

(define-public (transfer-ownership (new-owner principal))
  (begin
    (try! (check-initialized))
    (try! (check-is-owner tx-sender))
    (try! (validate-principal new-owner))
    (var-set contract-owner new-owner)
    (print {event: "ownership-transferred", new-owner: new-owner})
    (ok true)
  )
)